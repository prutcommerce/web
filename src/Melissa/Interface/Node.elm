-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Melissa.Interface.Node exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Melissa.InputObject
import Melissa.Interface
import Melissa.Object
import Melissa.Scalar
import Melissa.ScalarCodecs
import Melissa.Union


type alias Fragments decodesTo =
    { onOrder : SelectionSet decodesTo Melissa.Object.Order
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Melissa.Interface.Node
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Order" selections____.onOrder
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onOrder = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


id : SelectionSet Melissa.ScalarCodecs.Id Melissa.Interface.Node
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Melissa.ScalarCodecs.codecs |> Melissa.Scalar.unwrapCodecs |> .codecId |> .decoder)
