-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Evander.InputObject exposing (..)

import Evander.Interface
import Evander.Object
import Evander.Scalar
import Evander.ScalarCodecs
import Evander.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCreatePayment :
    CreatePaymentRequiredFields
    -> CreatePayment
buildCreatePayment required____ =
    { orderId = required____.orderId, cardNumber = required____.cardNumber, cardCvv = required____.cardCvv, cardExpiryYear = required____.cardExpiryYear, cardExpiryMonth = required____.cardExpiryMonth }


type alias CreatePaymentRequiredFields =
    { orderId : Evander.ScalarCodecs.Id
    , cardNumber : String
    , cardCvv : String
    , cardExpiryYear : Int
    , cardExpiryMonth : Int
    }


{-| Type for the CreatePayment input object.
-}
type alias CreatePayment =
    { orderId : Evander.ScalarCodecs.Id
    , cardNumber : String
    , cardCvv : String
    , cardExpiryYear : Int
    , cardExpiryMonth : Int
    }


{-| Encode a CreatePayment into a value that can be used as an argument.
-}
encodeCreatePayment : CreatePayment -> Value
encodeCreatePayment input____ =
    Encode.maybeObject
        [ ( "orderId", (Evander.ScalarCodecs.codecs |> Evander.Scalar.unwrapEncoder .codecId) input____.orderId |> Just ), ( "cardNumber", Encode.string input____.cardNumber |> Just ), ( "cardCvv", Encode.string input____.cardCvv |> Just ), ( "cardExpiryYear", Encode.int input____.cardExpiryYear |> Just ), ( "cardExpiryMonth", Encode.int input____.cardExpiryMonth |> Just ) ]
