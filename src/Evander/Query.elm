-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Evander.Query exposing (..)

import Evander.InputObject
import Evander.Interface
import Evander.Object
import Evander.Scalar
import Evander.ScalarCodecs
import Evander.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias PaymentsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument Evander.ScalarCodecs.Id
    }


payments :
    (PaymentsOptionalArguments -> PaymentsOptionalArguments)
    -> SelectionSet decodesTo Evander.Object.PaymentConnection
    -> SelectionSet decodesTo RootQuery
payments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after (Evander.ScalarCodecs.codecs |> Evander.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "payments" optionalArgs____ object____ Basics.identity
