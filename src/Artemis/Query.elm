-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Artemis.Query exposing (..)

import Artemis.InputObject
import Artemis.Interface
import Artemis.Object
import Artemis.Scalar
import Artemis.ScalarCodecs
import Artemis.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ProductsOptionalArguments =
    { first : OptionalArgument Int
    , after : OptionalArgument Int
    }


products :
    (ProductsOptionalArguments -> ProductsOptionalArguments)
    -> SelectionSet decodesTo Artemis.Object.ProductConnection
    -> SelectionSet decodesTo RootQuery
products fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, after = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "after" filledInOptionals____.after Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "products" optionalArgs____ object____ Basics.identity
