-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Artemis.Interface.Connection exposing (..)

import Artemis.InputObject
import Artemis.Interface
import Artemis.Object
import Artemis.Scalar
import Artemis.ScalarCodecs
import Artemis.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onProductConnection : SelectionSet decodesTo Artemis.Object.ProductConnection
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Artemis.Interface.Connection
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "ProductConnection" selections____.onProductConnection
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onProductConnection = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


edges :
    SelectionSet decodesTo Artemis.Interface.Edge
    -> SelectionSet (List decodesTo) Artemis.Interface.Connection
edges object____ =
    Object.selectionForCompositeField "edges" [] object____ (Basics.identity >> Decode.list)
